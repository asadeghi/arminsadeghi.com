<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="en">
	<title>Armin Sadeghi</title>
	<subtitle>Eyes of an engineer</subtitle>
	<link href="https://arminsadeghi.com/feed/feed.xml" rel="self"/>
	<link href="https://arminsadeghi.com/"/>
	<updated>2010-05-27T00:00:00Z</updated>
	<id>https://arminsadeghi.com/</id>
	<author>
		<name>Armin Sadeghi</name>
		<email>armin@arminsadeghi.com</email>
	</author>
	
	<entry>
		<title>Case-insensitive Autocomplete in Bash</title>
		<link href="https://arminsadeghi.com/blog/case-insensitive-autocomplete-in-bash"/>
		<updated>2010-05-27T00:00:00Z</updated>
		<id>https://arminsadeghi.com/blog/case-insensitive-autocomplete-in-bash</id>
		<content type="html">&lt;p&gt;I use auto complete on the command line all the time to avoid having to type the full name of a file. Love it. What I hate is how it’s case-sensitive in bash, so I can’t do &lt;code&gt;cd ~/desk&lt;/code&gt; to go to the &lt;code&gt;~/Desktop&lt;/code&gt; folder.&lt;/p&gt;
&lt;p&gt;The fix for this is to use the shell input options file &lt;strong&gt;.inputrc&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Just set this one option and restart your shell:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;set completion-ignore-case On&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&gt;&lt;/span&gt; ~/.inputrc&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you happen to have a system wide inputrc settings (&lt;code&gt;/etc/inputrc&lt;/code&gt;) and want it included then you should add the following to your .inputrc file:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$include /etc/inputrc
&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Software shortcuts</title>
		<link href="https://arminsadeghi.com/blog/software-shortcuts"/>
		<updated>2009-03-31T00:00:00Z</updated>
		<id>https://arminsadeghi.com/blog/software-shortcuts</id>
		<content type="html">&lt;p&gt;How many times have you used your code editor to look for some text and either didn’t find what you were after, or worse yet – were told that it’s not there when in fact it was? I bet this has happened to us all at some stage, and after some struggle you master the editor and life goes on, however I want to go over some basic tools/commands that you can always fall back to.&lt;/p&gt;
&lt;p&gt;One of the most useful is searching through files. In the windows world you should all know about &lt;strong&gt;findstr&lt;/strong&gt;. In particular the following variation:&lt;/p&gt;
&lt;pre class=&quot;language-dos&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-dos&quot;&gt;findstr /snip /c:&quot;string to look for&quot; *.cpp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will go through all sub directories, ignoring case, looking through all cpp files for the specified string. And it never lies. In the linux world you want to use something like this:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;string to look for&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you find yourself repeating steps like this often, place the command in a script. Here is the one I use (it ignores SVN hidden folders and uses color output):&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token shebang important&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-path&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*.svn*&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;xargs&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token variable&quot;&gt;$1&lt;/span&gt;&quot;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--color&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;always&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can perform all the above searching by using only grep as well:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;string to find&#39;&lt;/span&gt; * --exclude-dir&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;.svn&quot;&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-R&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;--color&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;always`&lt;/code&gt;&lt;/pre&gt;
</content>
	</entry>
	
	<entry>
		<title>Transparent build systems</title>
		<link href="https://arminsadeghi.com/blog/transparent-build-systems"/>
		<updated>2007-12-27T00:00:00Z</updated>
		<id>https://arminsadeghi.com/blog/transparent-build-systems</id>
		<content type="html">&lt;p&gt;Whenever you deal with a software project, you deal with a build system. The method and process by which you turn your code into a product. This may involve many steps such as pre-processing, compiling, linking, moving files around, and signing among others. The trouble is that on some projects this system becomes an afterthought rather than a purposeful choice. Today I want to briefly talk about the benefits obtained from a good build system.&lt;/p&gt;
&lt;p&gt;So why think seriously about a build system? Why not fire up Visual Studio, hit &#39;New Project&#39;, and just start coding? The simple answer is that you will eventually get stuck, and the last thing you want to get stuck with is a broken limiting build system that is difficult to decipher and extend. A good system will give you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A deterministic repeatable build. This will give you confidence that when you create a build it will actually work, the same way as on other machines, every time. No weird oddities or unexplainable results.&lt;/li&gt;
&lt;li&gt;Complete transparency over the build. Including every step, action, process, parameters and files involved, dependencies, and the control by which to alter any of the these.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;quot;Why is this good? NMake and command lines are painful, should we not have more abstraction?&amp;quot; you may ask. To a degree, yes, modern IDEs and some build tools make things easier, however they are generally designed to handle the common case, not anything complex. For example if your build involves building with different versions of a framework (such as a product targetting v1.1 and v2.0 of the .Net Framework), requiring input and output files in specific folders (seperating source files from generated ones is very helpful for both source control, tracking, and cleaning purposes), or being able to reproduce build steps individually for debugging.&lt;/p&gt;
&lt;p&gt;So what should you do? Its easy, just think about your requirements, the complexity of your project (both now and future), and ensure that you have enough transparency in the build system so that you can get what you need done as well as have the ability to view/fix/extend when necessary. In particular make sure:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build settings are stored somewhere easy to view.&lt;/li&gt;
&lt;li&gt;You have full control over where files are written to. The last thing you want is to have random temporary files generated all over your source tree (that you then, accidentally, check in to the depot).&lt;/li&gt;
&lt;li&gt;The build is deterministic. Deleting the output and rebuilding gives you the exact same thing every time.&lt;/li&gt;
&lt;li&gt;You have visibility into each step of the build, so that when something goes wrong you can see what caused it.&lt;/li&gt;
&lt;li&gt;You have control over the tools and dependencies used.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically as much transparency over the process as you can get. Other than that - don&#39;t be afraid of make /nmake /rake (or whichever dependency build utility applies to your project) and a command line. They work great!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Manual vs automatic memory management</title>
		<link href="https://arminsadeghi.com/blog/manual-vs-automatic-memory-management"/>
		<updated>2006-12-16T00:00:00Z</updated>
		<id>https://arminsadeghi.com/blog/manual-vs-automatic-memory-management</id>
		<content type="html">&lt;p&gt;Good memory management is essential for writing software applications that perform well. If the application takes too long to start or frustrates you as it completes operations, it doesn&#39;t make for a good experience. And there are many factors such as response time, working set, and hardware requirements to consider when dealing with performance. However memory management is a key ingredient, and deciding between manual and automatic systems can make a big difference.&lt;/p&gt;
&lt;p&gt;This is such a large topic. Where should I start? ...&lt;/p&gt;
&lt;p&gt;Lets start with some definitions. &lt;a href=&quot;http://en.wikipedia.org/wiki/Manual_memory_management&quot;&gt;Manual memory management&lt;/a&gt; is when the programmer manually controls the lifetime of allocated memory by specifically allocating and freeing it in a deterministic fashion. Alternatively, automatic memory management tries to determine what memory is no longer used and frees it automatically instead of relying on the programmer to identify it. Automatic memory management is sometimes referred to as &lt;a href=&quot;http://en.wikipedia.org/wiki/Garbage_collection_%28computer_science%29&quot;&gt;Garbage Collection&lt;/a&gt; (GC), however &amp;quot;garbage&amp;quot; could be defined as anything, so the term is a little vague. GC often refers to tracing garbage collection, one form of automatic memory management. Reference counting is an alternative automatic memory management method (when you Release an object it isn&#39;t necessarily freed, it all depends on the reference count, so as a consumer you do not control memory deallocation). The choice here is mostly independent of programming language. There are some languages that support manual management (such as C, C++), others that support automatic management with tracing GCs (such as Java, and C#), and others still that support both (like &lt;a href=&quot;http://en.wikipedia.org/wiki/D_programming_language&quot;&gt;D&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;So which one is better? Well the truth is that it all depends. There are many pros and cons to each method (discussed at length on &lt;a href=&quot;http://en.wikipedia.org/wiki/Memory_management&quot;&gt;wikipedia&lt;/a&gt;). In the end you have to pick the solution based on your specific requirements. However today lets talk about performance in particular. If you have some crazy high performance requirements (perhaps a real-time application), what do you do? ... you get more control.&lt;/p&gt;
&lt;p&gt;By using manual memory management you are gaining more control over when memory is allocated and deallocated, giving you, the developer, more control over how to deal with it. You can then be mindful of such things as memory locality, consumption in tight loops, and memory reuse, while avoiding indeterministic deallocation (tracing garbage collectors). You can still have enough control with automatic memory management if you stick with ref counting as a means to control memory/object lifetime. However there is a cost to be paid for these advantages, mostly in development difficulty - the more control you have, the more likely you are to make mistakes (mistakes here lead to memory leaks). And mistakes are bugs.. some bad, some really bad.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>COM aggregation and ref counting woes</title>
		<link href="https://arminsadeghi.com/blog/com-aggregation-and-ref-counting-woes"/>
		<updated>2006-11-24T00:00:00Z</updated>
		<id>https://arminsadeghi.com/blog/com-aggregation-and-ref-counting-woes</id>
		<content type="html">&lt;p&gt;Why are we talking about &lt;a href=&quot;http://en.wikipedia.org/wiki/Component_Object_Model&quot;&gt;Component Object Model&lt;/a&gt; (COM), isn&#39;t that old dead technology? Well… no. There are still so many COM objects in use today, in many projects, that you will run into them sooner or later. As a software engineer you might even have to resolve bugs in these components. Today I want to draw attention to ref counting bugs that can creep in when using aggregation within these objects.&lt;/p&gt;
&lt;p&gt;COM objects use reference counting to control their lifetime. This is achieved through the implementation of an &lt;code&gt;_IUnknown_&lt;/code&gt; interface by each and every object. This interface contains (quick – what are the first three v-table entries?) &lt;code&gt;_IUnknown::QueryInterface_&lt;/code&gt;, &lt;code&gt;_IUnknown::AddRef_&lt;/code&gt; and &lt;code&gt;_IUnknown::Release_&lt;/code&gt;. So after you add a reference to an object with &lt;code&gt;_AddRef_&lt;/code&gt;, you are expected to call &lt;code&gt;_Release_&lt;/code&gt; when you are finished. Reference counting bugs can crop up in object clients when someone forgets this rule and are usually a real pain to find. This difficulty can be compounded even further if the object itself messes up its implementation of &lt;code&gt;_AddRef_&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The implementation of &lt;code&gt;_AddRef_&lt;/code&gt; is typically simple (just increment an internal counter), however when the object aggregates other objects in its internal implementation (another form of object reuse as opposed to using containment) it becomes more complex. In these cases you have to ensure that AddRef and Release calls operate on the correct object.&lt;/p&gt;
&lt;p&gt;Lets take the example of a hypothetical AIRPLANE object. An AIRPLANE is implemented by aggregating WING, and ENGINE objects. WING implements &lt;code&gt;_IWing_&lt;/code&gt; and &lt;code&gt;_IUnknown_&lt;/code&gt;, ENGINE implements &lt;code&gt;_IEngine_&lt;/code&gt; and &lt;code&gt;_IUnknown_&lt;/code&gt;. Now clients of the AIRPLANE object would expect that &lt;code&gt;_IWing::AddRef_&lt;/code&gt;, and &lt;code&gt;_IEngine::AddRef_&lt;/code&gt; both control the lifetime of the outer object (the component/object doing the reusing – in this case AIRPLANE). This is fair and reasonable, however the only way this can happen is if the inner objects (WING and ENGINE) are aware of the outer object. So when WING and ENGINE are created, AIRPLANE passes a pointer to its &lt;code&gt;_IUnknown_&lt;/code&gt; implementation (called the controlling unknown) down to the inner objects. If they support aggregation then they will use this pointer to handle any &lt;code&gt;_IUnknown_&lt;/code&gt; calls that come in through &lt;code&gt;_IWing_&lt;/code&gt; and &lt;code&gt;_IEngine_&lt;/code&gt;. If they do not support aggregation they will return &lt;code&gt;CLASS*E_NOAGGREGATION&lt;/code&gt; and fail creation. However ENGINE and WING must not delegate to the controlling unknown for any &lt;code&gt;_AddRef_&lt;/code&gt; and &lt;code&gt;_Release_&lt;/code&gt; calls that come in through &lt;code&gt;_IUnknown_&lt;/code&gt; itself, as this is what the outer object will use to control their lifetime.&lt;/p&gt;
&lt;p&gt;These are just the basic rules of aggregation that when applied ensure that object lifetime is still managed correctly. Common problems arise when the inner objects forget to delegate the &lt;code&gt;_AddRef_&lt;/code&gt; and &lt;code&gt;_Release_&lt;/code&gt; calls to the controlling unknown, or do so in the wrong case (i.e. when called through &lt;code&gt;_IUnknown::AddRef_&lt;/code&gt;). In this case the client of AIRPLANE may see what appears to be a ref counting bug on their side, but is actually an internal issue with the aggregation.&lt;/p&gt;
&lt;p&gt;No wonder people like managed code and .NET, ref counting bugs can get tricky!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Windows PowerShell</title>
		<link href="https://arminsadeghi.com/blog/windows-powershell"/>
		<updated>2006-11-02T00:00:00Z</updated>
		<id>https://arminsadeghi.com/blog/windows-powershell</id>
		<content type="html">&lt;p&gt;Power users love shells. Not the seafood kind, but the command line interface, computer command scripting kind. Even MacOS which was traditionally GUI driven, now has a shell (albeit somewhat hidden), due to its makeover in OS X. With a shell the user can input text commands to manipulate the computer. The most obvious use of which is the ability to script common operations, or perform functions faster than perhaps the user-interface driven counterpart operation.&lt;/p&gt;
&lt;p&gt;MS Windows based operating systems have been using cmd.exe as their shell for quite some time, until PowerShell came along. &lt;a href=&quot;http://www.microsoft.com/windowsserver2003/technologies/management/powershell/default.mspx&quot;&gt;Windows PowerShell&lt;/a&gt; currently has an RC2 release available for &lt;a href=&quot;http://www.microsoft.com/technet/scriptcenter/topics/msh/download.mspx&quot;&gt;download&lt;/a&gt;. Whats so special about Windows PowerShell?.. where do I start? 🙂&lt;/p&gt;
&lt;p&gt;The biggest change is in the object pipeline. No longer do commands output text, now its all objects. So when you do something like:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Get-Process&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;Format-Wide&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output of &lt;em&gt;Get-Process&lt;/em&gt; is piped, as objects, to the next command. In this case &lt;em&gt;Format-Wide&lt;/em&gt; takes the objects and formats them in a particular way. You could have used &lt;em&gt;Format-List&lt;/em&gt;, or a multitude of other variations. Passing objects allows much richer communication between functions in the command pipeline as well as other shell operations. So you can imagine what something like this may do:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token function&quot;&gt;Get-Process&lt;/span&gt; m* &lt;span class=&quot;token punctuation&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dir&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes you guessed it, it actually lists the folder location of all currently running processes that start with the letter m.&lt;/p&gt;
&lt;p&gt;Windows PowerShell also has a whole new syntax. Commands have verb-noun type names which provides for clear, consistent, and easily discoverable functionality (and if you are ever lost, just type &amp;quot;&lt;em&gt;help&lt;/em&gt;&amp;quot;, or append &amp;quot;&lt;em&gt;-?&lt;/em&gt;&amp;quot; to a command). To help people transition from other shells there are aliased commands, so commands such as &amp;quot;cd&amp;quot;, &amp;quot;dir&amp;quot;, &amp;quot;more&amp;quot; are aliased to their corresponding commands and work just fine.&lt;/p&gt;
&lt;p&gt;I could go on for pages and pages about all the cool new things, but lets just cover two more items, PowerShell drives, and COM object scripting (that I thought was very cool). Have you ever wanted to query the registry and manipulate it right from a script instead of messing with regedit and .reg files? Well try this out:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;cd HKLM:&#92;Software&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and now you have navigated to &lt;code&gt;HKEY*LOCAL_MACHINE&#92;Software&lt;/code&gt;. Well what else can you do? Just try &lt;code&gt;&#92;_Get-PSDrive*&lt;/code&gt; to see a list of all the other mapped PowerShell drives you can navigate.&lt;/p&gt;
&lt;p&gt;So what if you have a COM Automation object that you want to work with? Lets say you need to boot Excel, do a few calculations and retrieve the result? Prior to Windows PowerShell this was not trivial but now all you need is a few lines similar to this:&lt;/p&gt;
&lt;pre class=&quot;language-powershell&quot; tabindex=&quot;0&quot;&gt;&lt;code class=&quot;language-powershell&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt; = &lt;span class=&quot;token function&quot;&gt;New-Object&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ComObject Excel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Application
&lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Workbooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Add&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Range&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A1&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value2 = 5
&lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Range&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A2&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value2 = 6
&lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Range&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Value2 = &lt;span class=&quot;token string&quot;&gt;&quot;=Sum(A1, A2)&quot;&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$output&lt;/span&gt; = &lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Range&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;A3&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token variable&quot;&gt;$xl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Quit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It looks similar to C#, but being able to run this straight from a command line script is just great.&lt;/p&gt;
</content>
	</entry>
</feed>
